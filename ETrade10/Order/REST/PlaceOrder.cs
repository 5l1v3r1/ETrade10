using System.Collections.Generic;
using System.Threading.Tasks;
using OkonkwoETrade10.Common;
using OkonkwoETrade10.Order;
using OkonkwoETrade10.REST.OrderRequest;

namespace OkonkwoETrade10.REST
{
   public partial class ETrade10
   {
      /// <summary>
      /// The Place Order API is used to submit an order after it has been successfully previewed.
      /// https://apisb.etrade.com/docs/api/order/api-order-v1.html#/definition/orderPlace
      /// </summary>
      /// <param name="accountIdKey">The unique account key</param>
      /// <returns>a PostOrderResponse object</returns>
      public async Task<PlaceOrderResponse> PlaceOrderAsync(string accountIdKey, PlaceOrderRequest request)
      {
         string uri = ServerUri(EServer.Accounts) + $"{accountIdKey}/orders/place";

         //var order = new Dictionary<string, PlaceOrderRequest> { { "order", request } };
         string body = ConvertToJSON(request);

         var response = await MakeRequestWithJSONBody<PlaceOrderResponse, PlaceOrderErrorResponse>("POST", body, uri);

         return response;
      }
   }

   /// <summary>
   /// The POST success response
   /// https://apisb.etrade.com/docs/api/order/api-order-v1.html#/definitions/PlaceOrderResponse
   /// </summary>
   public class PlaceOrderResponse : Response
   {
      /// <summary>
      /// The type of order being placed
      /// </summary>
      public decimal orderType { get; set; }

      /// <summary>
      /// The object for the message list
      /// </summary>
      public Messages messageList { get; set; }

      /// <summary>
      /// The total order value
      /// </summary>
      public decimal totalOrderValue { get; set; }

      /// <summary>
      /// The total commission
      /// </summary>
      public decimal totalCommission { get; set; }

      /// <summary>
      /// ID number assigned to this order
      /// </summary>
      public long orderId { get; set; }

      /// <summary>
      /// The details for the order
      /// </summary>
      public List<OrderDetail> order { get; set; }

      /// <summary>
      /// Indicator flag identifying whether daylight savings time is applicable or not
      /// </summary>
      public bool dstFlag { get; set; }

      /// <summary>
      /// The code that designates the applicable options level
      /// </summary>
      public int optionLevelCd { get; set; }

      /// <summary>
      /// The code that designates the applicable margin level
      /// </summary>
      public string marginLevelCd { get; set; }

      /// <summary>
      /// Indicator flag identifying whether user is an E*TRADE employee
      /// </summary>
      public bool isEmployee { get; set; }

      /// <summary>
      /// The commission message
      /// </summary>
      public string commissionMsg { get; set; }

      /// <summary>
      /// The confirmation number of the particular order placed
      /// </summary>
      public List<OrderId> orderIds { get; set; }

      /// <summary>
      /// The time the order was previewed
      /// </summary>
      public long placedTime { get; set; }

      /// <summary>
      /// The numeric account ID
      /// </summary>
      public string accountId { get; set; }

      /// <summary>
      /// The portfolio margin details for the user
      /// </summary>
      public PortfolioMargin portfolioMargin { get; set; }

      /// <summary>
      /// The disclosure designation
      /// </summary>
      public Disclosure disclosure { get; set; }

      /// <summary>
      /// A reference number generated by the developer used to ensure that a duplicate order is not being submitted. 
      /// This ID may be any value of 20 or less alphanumeric characters, but it must be unique within this account. 
      /// This field does not appear in any API responses.	
      /// </summary>
      public string clientOrderId { get; set; }
   }

   /// <summary>
   /// The POST error response received from accounts/accountID/orders
   /// </summary>
   public class PlaceOrderErrorResponse : ErrorResponse
   {

   }
}
